{"version":3,"sources":["tonva/entry/register.tsx"],"names":["RegisterController","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","login","account","a","userApi","user","pwd","password","guest","nav","undefined","retUser","alert","userLogined","this","openVPage","AccountPage","VerifyPage","PasswordPage","accounts","RegSuccess","registerReturn","msg","isExists","ret","error","accountError","sendVerify","type","oem","toVerify","params","nick","country","mobile","mobileCountry","email","verify","Number","register","clear","toSuccess","regReturn","Controller","ForgetController","resetPassword","schema","name","required","maxLength","res","resLang","registerRes","page","header","controller","className","style","marginLeft","marginRight","tonvaTop","uiSchema","onButtonClick","onSubmit","onEnter","requiredFlag","privacyEntry","context","clearContextErrors","value","getValue","sender","getSender","setError","length","checkAccount","items","widget","label","placeholder","openPage","VPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","toPassword","typeText","extra","values","form","data","rePwd","setValue","execute","push","users","onClick","map","v"],"mappings":"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","file":"static/js/0.5aedb437.chunk.js","sourcesContent":["import * as React from 'react';\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, NumSchema} from '../components';\nimport { Controller, VPage } from '../vm';\nimport { userApi, RegisterParameter } from '../net';\nimport '../css/va-form.css';\nimport { RegisterRes, registerRes } from '../res';\nimport { tonvaTop, getSender } from './tools';\n\nexport interface Values {\n    user: string;\n    pwd: string;\n    rePwd: string;\n    country?: string;\n    mobile?: string;\n    email?: string;\n}\n/*\nclass AccountInput extends TextWidget {\n    @observable private buttonDisabled: boolean = true;\n    private onClick = () => {\n        let {onButtonClick} = this.context.form.props;\n        if (onButtonClick === undefined) return;\n        onButtonClick(this.name, this.context);\n    }\n    protected onChange(evt: React.ChangeEvent<any>) {\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\n    }\n    render() {\n        return <>\n            <div className=\"input-group\">\n                <input ref={input=>this.input = input}\n                            className=\"form-control\"\n                            type={this.inputType}\n                            defaultValue={this.value}\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\n                            placeholder='手机号/邮箱'\n                            readOnly={this.readOnly}\n                            disabled={this.disabled}\n                            onKeyDown = {this.onKeyDown}\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-sm btn-outline-primary\"\n                        type=\"button\" disabled={this.buttonDisabled}\n                        onClick={this.onClick}>\n                        <small>发送验证码</small>\n                    </button>\n                </div>\n            </div>\n            {this.renderErrors()}\n        </>;\n    }\n}\n*/\nexport class RegisterController extends Controller {\n    account: string;\n    type:'mobile'|'email';\n    password: string;\n    verify: string;\n\n    accountPageCaption = '注册账号';\n    accountLabel = '注册账号';\n    accountSubmitCaption = '注册新账号'; \n    passwordPageCaption = '账号密码';\n    passwordSubmitCaption = '注册新账号'; \n    successText = '注册成功';\n\n    protected async internalStart() {\n        this.openVPage(AccountPage);\n    }\n\n    toVerify(account:string) {\n        this.account = account;\n        this.openVPage(VerifyPage);\n    }\n\n    toPassword() {\n        this.openVPage(PasswordPage);\n    }\n\n    toSuccess(accounts?:any[]) {\n        this.openVPage(RegSuccess, accounts);\n    }\n\n    login = async (account?:string) => {\n        let retUser = await userApi.login({user: account || this.account, pwd: this.password, guest: nav.guest});\n        if (retUser === undefined) {\n            alert('something wrong!');\n            return;\n        }\n        await nav.userLogined(retUser);\n    }\n\n    private regReturn(registerReturn:number):string {\n        let msg:any;\n        switch (registerReturn) {\n            default: \n                return '服务器发生错误';\n            case 4:\n                return '验证码错误';\n            case 0:\n                return;\n            case 1:\n                msg = '用户名 ' + this.account;\n                break;\n            case 2:\n                msg = '手机号 +' + this.account;\n                break;\n            case 3:\n                msg = '邮箱 ' + this.account;\n                break;\n        }\n        return msg + ' 已经被注册过了';\n    }\n\n    async checkAccount():Promise<string> {\n        let ret = await userApi.isExists(this.account);\n        let error = this.accountError(ret);\n        if (error !== undefined) return error;\n        ret = await userApi.sendVerify(this.account, this.type, nav.oem);\n        this.toVerify(this.account);\n        return;\n    }\n\n    protected accountError(isExists: number) {\n        if (isExists > 0) return '已经被注册使用了';\n    }\n\n    async execute() {\n        let params: RegisterParameter = {\n            nick: undefined,\n            user: this.account, \n            pwd: this.password,\n            country: undefined,\n            mobile: undefined,\n            mobileCountry: undefined,\n            email: undefined,\n            verify: this.verify\n        }\n        switch (this.type) {\n            case 'mobile':\n                params.mobile = Number(this.account);\n                params.mobileCountry=86;\n                break;\n            case 'email':\n                params.email = this.account;\n                break;\n        }\n        let ret = await userApi.register(params);\n        if (ret === 0) {\n            nav.clear();\n            this.toSuccess();\n            return;\n        }\n        let error = this.regReturn(ret)\n        return error;\n    }\n}\n\nexport class ForgetController extends RegisterController {\n    accountPageCaption = '密码找回';\n    accountLabel = '账号';\n    accountSubmitCaption = '注册新账号'; \n    passwordPageCaption = '重置密码';\n    passwordSubmitCaption = '提交'; \n    successText = '成功修改密码';\n\n    async execute():Promise<any> {\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\n        nav.clear();\n        this.toSuccess(ret);\n        return undefined;\n    }\n\n    protected accountError(isExists: number) {\n        if (isExists === 0) return '请输入正确的账号';\n    }\n}\n\nclass AccountPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'verify', type: 'submit'},\n    ]\n    private uiSchema: UiSchema;\n\n    protected res: RegisterRes = resLang(registerRes);\n    async open() {\n        this.uiSchema = {\n            items: {\n                user: {\n                    widget: 'text',\n                    label: this.controller.accountLabel,\n                    placeholder: '手机号或邮箱',\n                } as UiTextItem, \n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\n            }\n        }\n                \n            this.openPage(this.page);\n    }\n\n    private page = ():JSX.Element => {\n        return <Page header={this.controller.accountPageCaption}>\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                {tonvaTop()}\n                <div className=\"h-3c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema} \n                    onButtonClick={this.onSubmit}\n                    onEnter={this.onEnter} \n                    requiredFlag={false} />\n                {nav.privacyEntry()}\n            </div>\n        </Page>;\n    }\n\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        context.clearContextErrors();\n        let user = 'user';\n        let value = context.getValue(user);\n        let sender = getSender(value);\n        if (sender === undefined) {\n            context.setError(user, '必须是手机号或邮箱');\n            return;\n        }\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\n        if (type === 'mobile') {\n            if (value.length !== 11 || value[0] !== '1') {\n                context.setError(user, '请输入正确的手机号');\n                return;\n            }\n        }\n        this.controller.account = value;\n        this.controller.type = type;\n        let ret = await this.controller.checkAccount();\n        if (ret !== undefined) context.setError(user, ret);\n    }\n\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'user') {\n            return await this.onSubmit('verify', context);\n        }\n    }\n}\n\nclass VerifyPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\n        {name: 'submit', type: 'submit'},\n    ]\n\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\n        context.setDisabled('submit', !value || (value.length !== 6));\n    }\n    private uiSchema: UiSchema = {\n        items: {\n            verify: {\n                widget: 'text',\n                label: '验证码',\n                placeholder: '请输入验证码',\n                onChanged: this.onVerifyChanged,\n            } as UiTextItem, \n            submit: {\n                widget: 'button', \n                className: 'btn btn-primary btn-block mt-3', \n                label: '下一步 >',\n                disabled: true\n            } as UiButton,\n        }\n    }\n    async open() {\n        this.openPage(this.page);\n    }\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let verify = this.controller.verify = context.getValue('verify');\n        let ret = await userApi.checkVerify(this.controller.account, verify);\n        if (ret === 0) {\n            context.setError('verify', '验证码错误');\n            return;\n        }\n        this.controller.toPassword();\n    }\n\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'verify') {\n            return await this.onSubmit('submit', context);\n        }\n    }\n    private page = ():JSX.Element => {\n        let typeText:string, extra:any;\n        switch (this.controller.type) {\n            case 'mobile': typeText = '手机号'; break;\n            case 'email': \n                typeText = '邮箱'; \n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\n                break;\n        }\n        return <Page header=\"验证码\">\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                验证码已经发送到{typeText}<br/>\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\n                {extra}\n                <div className=\"h-1c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema} \n                    onButtonClick={this.onSubmit} \n                    onEnter={this.onEnter}\n                    requiredFlag={false} />\n            </div>\n        </Page>\n    }\n}\n\nclass PasswordPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'submit', type: 'submit'},\n    ]\n    private uiSchema: UiSchema;\n    async open() {\n        this.uiSchema = {\n            items: {\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\n            }\n        }\n        this.openPage(this.page);\n    }\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let values = context.form.data;\n        let {pwd, rePwd} = values;\n        let error:string;\n        if (!pwd || pwd !== rePwd) {\n            context.setValue('pwd', '');\n            context.setValue('rePwd', '');\n            error = '密码错误，请重新输入密码！';\n            context.setError('pwd', error);\n        }\n        else {\n            this.controller.password = pwd;\n            error = await this.controller.execute();\n            if (error !== undefined) {\n                nav.push(<Page header=\"注册不成功\"><div className=\"p-5 text-danger\">{error}</div></Page>);\n            }\n        }\n        return error;\n    }\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'rePwd') {\n            return await this.onSubmit('submit', context);\n        }\n    }\n    private page = ():JSX.Element => {\n        return <Page header={this.controller.passwordPageCaption}>\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                注册账号<br/>\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\n                <div className=\"h-1c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \n                    onButtonClick={this.onSubmit}\n                    onEnter={this.onEnter}\n                    requiredFlag={false} />\n            </div>\n        </Page>\n    }\n}\n\nclass RegSuccess extends VPage<RegisterController> {\n    async open(users: any[]) {\n        this.openPage(this.page, {users:users});\n    }\n\n    private page = ({users}:{users:any[]}) => {\n        const {account, successText, login} = this.controller;\n        if (users === undefined) {\n            return <Page header={false}>\n                <div className=\"container w-max-30c\">\n                    <div className=\"my-5\">\n                        <div className=\"py-5\">\n                            账号 <strong className=\"text-primary\">{account} </strong> {successText}！\n                        </div>\n                        <button className=\"btn btn-success btn-block\" type=\"button\" onClick={()=>login(undefined)}>\n                            直接登录\n                        </button>\n                    </div>\n                </div>\n            </Page>;\n        }\n        else {\n            return <Page header={false}>\n                <div className=\"container w-max-30c\">\n                    <div className=\"my-5\">\n                        <div className=\"py-5 text-success\">{successText}</div>\n                        {users.map((v:any) => {\n                            let {name} = v;\n                            return <div className=\"py-2 cursor-pointer\" onClick={()=>login(name)}>\n                                登录账号 <strong className=\"text-primary\">{name} </strong>\n                            </div>\n                        })}\n                    </div>\n                </div>\n            </Page>;\n        }\n    }\n}\n"],"sourceRoot":""}